#!/bin/bash

if [ "$SNAP_ARCH" != "i386" ] && [ "$SNAP_ARCH" != "amd64" ]; then
  echo "Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

[ -z "${SNAP_TITLE}" ] && SNAP_TITLE="${SNAP_NAME}"
NOTICE="The ${SNAP_TITLE} snap is experimental, built with development releases of upstream WINE and may not function as expected."
if [ -n "$SNAP_SUPPORT_URL" ]; then
  SUPPORT_TEXT="If you encounter issues please report them on the ${SNAP_TITLE} snap issue tracker:\\n\\n${SNAP_SUPPORT_URL}"
else
  SUPPORT_TEXT="If you encounter issues please report them to the snap author. You can find contact information by running \`snap info ${SNAP_NAME}\` in a terminal."
fi
NOTICE="$NOTICE\\n$SUPPORT_TEXT"

needs_update=true

. "$SNAP_USER_DATA/.last_revision" 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi

# Set $REALHOME to the users real home directory
REALHOME="$(getent passwd $UID | cut -d ':' -f 6)"

# Enable esync if $ENABLE_ESYNC is set to true
if [ "$ENABLE_ESYNC" = "true" ]; then
  export WINEESYNC=1 
fi

# https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
vercomp() {
    if [[ $1 == $2 ]]
    then
        return 1
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 0
        fi
    done
    return 1
}

function install_app() {
  if [ -f "$SNAP/bin/snap-pre-install" ]; then
    . "$SNAP/bin/snap-pre-install"
  fi

  # Install additional requirements via winetricks here
  if [ -n "${TRICKS}" ]; then
    for TRICK in ${TRICKS}; do
      "${WINETRICKS}" --unattended prefix="$WINEPREFIX" "${TRICK}" | \
      yad --progress --title="Installing ${TRICK}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
    done
  fi

  # Install DXVK if ENABLE_DXVK is set to true
  if [ "$ENABLE_DXVK" = "true" ]; then
    TRICK='dxvk'
    "${WINETRICKS}" --unattended prefix="$WINEPREFIX" "${TRICK}" | \
    yad --progress --title="Installing ${TRICK}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
  fi

  # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL}" -O "${TMPDIR}/${INSTALL_EXE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape

    LOCAL_INSTALL_EXE="${TMPDIR}/${INSTALL_EXE}"
  elif [ -n "${INSTALL_EXE}" ]; then
    LOCAL_INSTALL_EXE="${INSTALL_EXE}"
  fi

  # Installs the wine application
  "${WINELOADER}" "${LOCAL_INSTALL_EXE}" /silent

  if [ -n "${INSTALL_URL}" ]; then
    # Removes the cached installer
    rm -v "${TMPDIR}/${INSTALL_EXE}"
  fi

  if [ -f "$SNAP/bin/snap-post-install" ]; then
    . "$SNAP/bin/snap-post-install"
  fi

  if [ -f "$SNAP/version" ]; then
    cp "$SNAP/version" "$SNAP_USER_COMMON/version"
  fi

  # Launch after install.
  if [ -z "$LAUNCH_AFTER_INSTALL" ] || [ "$LAUNCH_AFTER_INSTALL" != "false" ]; then
    launch_app
  fi
}

function launch_app() {
  # If we don't change into the program directory some assets may not be found
  cd "${WINE_DIR}" || exit 10

  if [ -f "$SNAP/bin/snap-pre-start" ]; then
    . "$SNAP/bin/snap-pre-start"
  fi

  WINEPID=

  # Only use virtual desktop if it has been requested and we're running Xorg
  if [ "${XDG_SESSION_TYPE}" == "x11" ] && [ "${VIRTDESKTOP}" == "1" ]; then
    # Get the native resolution of the primary display.
    # Creating a virtual desktop the same size will eliminate bugs when
    # switching from fullscreen to windowed mode.
    NATIVE_RES="$(xrandr -q | grep primary | cut -d' ' -f4 | cut -d'+' -f1)"
    "${WINELOADER}" explorer /desktop="virtual,${NATIVE_RES}" "${WINE_EXE}" "${WINE_EXE_ARGS[@]}" &
    WINEPID=$!
  else
    "${WINELOADER}" "${WINE_EXE}" "${WINE_EXE_ARGS[@]}" &
    WINEPID=$!
  fi

  wait $WINEPID

  if [ -f "$SNAP/bin/snap-post-stop" ]; then
    . "$SNAP/bin/snap-post-stop"
  fi
}

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# Get the executable we're being asked to launch
if [ -n "${1}" ]; then
  WINE_EXE="${1}"
  if [ "$SNAP_ARCH" = "amd64" ]; then
    WINE_EXE="${WINE_EXE/"/Program Files/"/"/Program Files (x86)/"}"
  fi

  WINE_DIR="$(dirname "${WINE_EXE}")"

  shift
  WINE_EXE_ARGS=( "$@" )
else
  echo "ERROR! I need an executable that I should launch. Exiting here."
  exit 1
fi

if [ -z "${WINEDEBUG}" ]; then
  export WINEDEBUG="-all"
fi

if [ -z "${DXVK_LOG_LEVEL}" ]; then
  export DXVK_LOG_LEVEL="none"
fi

append_dir PATH "$SNAP/bin"
append_dir PATH "$SNAP/usr/bin"

# If we've been given and installer URL derive the filename
if [ -n "${INSTALL_URL}" ]; then
  INSTALL_EXE="$(basename "${INSTALL_URL}")"
fi

if [ -n "${DLLOVERRIDES}" ]; then
  export WINEDLLOVERRIDES="${DLLOVERRIDES}"
fi

if [ -x "$SNAP/bin/wine" ]; then
  WINEVERPATH="$SNAP"
elif [ -x "$SNAP/usr/bin/wine" ]; then
  WINEVERPATH="$SNAP/usr"
elif [ -d "$SNAP/opt/wine" ]; then
  WINEVERPATH="$SNAP/opt/wine"
elif [ -d "$SNAP/opt/wine-devel" ]; then
  WINEVERPATH="$SNAP/opt/wine-devel"
fi

if [ "$SNAP_ARCH" = "i386" ] || [ "$FORCE_WIN32" = "true" ]; then
    export WINE="wine"
    export WINEARCH="win32"
    export WINELOADER="$WINEVERPATH/bin/wine"
    export WINEDLLPATH="$WINEVERPATH/lib/wine/fakedlls"
    export ARCH="i386-linux-gnu"
elif [ "$SNAP_ARCH" = "amd64" ] ; then
    export WINE="wine64"
    export WINEARCH="win64"
    export WINELOADER="$WINEVERPATH/bin/wine64"
    export WINEDLLPATH="$WINEVERPATH/lib64/wine/fakedlls"
    export ARCH="x86_64-linux-gnu"
fi

export WINESERVER="$WINEVERPATH/bin/wineserver"
export WINETRICKS="$SNAP/bin/winetricks"
export WINEPATH="$WINEVERPATH/bin/winepath"
export WINEPREFIX="$SNAP_USER_COMMON/.wine"

# for dxvk installer
export wine="$WINEVERPATH/bin/wine"

append_dir PATH "$WINEVERPATH/bin"

export LD_LIBRARY_PATH="$SNAP/lib:$SNAP/lib/$ARCH:/lib:/lib/$ARCH:$SNAP/usr/lib:$SNAP/usr/lib/$ARCH:/usr/lib:/usr/lib/$ARCH:$SNAP/usr/lib/$ARCH/samba"
if [ "$SNAP_ARCH" = "amd64" ]; then
  append_dir LD_LIBRARY_PATH "$SNAP/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "/usr/lib/i386-linux-gnu"
  append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/i386-linux-gnu/samba"
fi

append_dir LD_LIBRARY_PATH "$WINEVERPATH/lib"
if [ "$SNAP_ARCH" = "amd64" ]; then
    append_dir LD_LIBRARY_PATH "$WINEVERPATH/lib64"
fi

export DXVK_CONFIG_FILE="$SNAP_USER_COMMON/dxvk.conf"

# XKB config
export XKB_CONFIG_ROOT="$SNAP/usr/share/X11/xkb"

export SYSTEM_WGETRC="$SNAP/etc/wgetrc"

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR="$SNAP/usr/share/X11/locale"

# Set XCursors path
export XCURSOR_PATH="$SNAP/usr/share/icons"

# Mesa Libs for OpenGL support
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/$ARCH/mesa"
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/$ARCH/mesa-egl"

# Tell libGL and libva where to find the drivers
export LIBGL_DRIVERS_PATH="$SNAP/usr/lib/$ARCH/dri"
export LIBVA_DRIVERS_PATH="$SNAP/usr/lib/$ARCH/dri"
if [ "$SNAP_ARCH" = "amd64" ]; then
    append_dir LIBGL_DRIVERS_PATH "$SNAP/usr/lib/i386-linux-gnu/dri"
    append_dir LIBVA_DRIVERS_PATH "$SNAP/usr/lib/i386-linux-gnu/dri"
fi
append_dir LD_LIBRARY_PATH "$LIBGL_DRIVERS_PATH"

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
append_dir LD_LIBRARY_PATH /var/lib/snapd/lib/gl

# Pulseaudio export
append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/$ARCH/pulseaudio"
if [ "$SNAP_ARCH" = "amd64" ]; then
    append_dir LD_LIBRARY_PATH "$SNAP/usr/lib/i386-linux-gnu/pulseaudio"
fi

# EGL vendor files on glvnd enabled systems
[ -d /var/lib/snapd/lib/glvnd/egl_vendor.d ] && \
append_dir __EGL_VENDOR_LIBRARY_DIRS /var/lib/snapd/lib/glvnd/egl_vendor.d

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH="$SNAP/usr/lib/$ARCH/gstreamer-1.0"
export GST_PLUGIN_SYSTEM_PATH="$SNAP/usr/lib/$ARCH/gstreamer-1.0"
if [ "$ARCH" = "amd64" ]; then
    append_dir GST_PLUGIN_PATH "$SNAP/usr/lib/i386-linux-gnu/gstreamer-1.0"
    append_dir GST_PLUGIN_SYSTEM_PATH "$SNAP/usr/lib/i386-linux-gnu/gstreamer-1.0"
fi
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER="$SNAP/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner"

# XDG Config
prepend_dir XDG_CONFIG_DIRS "$SNAP/etc/xdg"

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS "$SNAP/usr/share"
prepend_dir XDG_DATA_DIRS "$SNAP/share"
prepend_dir XDG_DATA_DIRS "$SNAP_USER_COMMON"

export HOME="$SNAP_USER_COMMON"

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME="$SNAP_USER_COMMON/.local/share"
mkdir -p "$XDG_DATA_HOME"

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS "$XDG_DATA_HOME"

# Set cache folder to local path
export XDG_CACHE_HOME="$SNAP_USER_COMMON/.cache"
mkdir -p "$XDG_CACHE_HOME"

# Set config folder to local path
export XDG_CONFIG_HOME="$SNAP_USER_COMMON/.config"
mkdir -p "$XDG_CONFIG_HOME"

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p "$XDG_RUNTIME_DIR" -m 700

# Ensure the app finds locale definitions (requires locales-all to be installed)
append_dir LOCPATH "$SNAP/usr/lib/locale"

# If detect wayland server socket, then set environment so applications prefer
# wayland, and setup compat symlink (until we use user mounts. Remember,
# XDG_RUNTIME_DIR is /run/user/<uid>/snap.$SNAP so look in the parent directory
# for the socket. For details:
# https://forum.snapcraft.io/t/wayland-dconf-and-xdg-runtime-dir/186/10
if [[ -n "$XDG_RUNTIME_DIR" && -z "$DISABLE_WAYLAND" ]]; then
    wdisplay="wayland-0"
    if [ -n "$WAYLAND_DISPLAY" ]; then
        wdisplay="$WAYLAND_DISPLAY"
    fi
    wayland_sockpath="$XDG_RUNTIME_DIR/../$wdisplay"
    wayland_snappath="$XDG_RUNTIME_DIR/$wdisplay"
    if [ -S "$wayland_sockpath" ]; then
        # create the compat symlink for now
        if [ ! -e "$wayland_snappath" ]; then
            ln -s "$wayland_sockpath" "$wayland_snappath"
        fi
    fi
fi

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Font Config and themes
export FONTCONFIG_PATH="$SNAP/etc/fonts"
export FONTCONFIG_FILE="$SNAP/etc/fonts/fonts.conf"

function make_user_fontconfig {
  echo "<fontconfig>"
  if [ -d "$REALHOME/.local/share/fonts" ]; then
    echo "  <dir>$REALHOME/.local/share/fonts</dir>"
  fi
  if [ -d "$REALHOME/.fonts" ]; then
    echo "  <dir>$REALHOME/.fonts</dir>"
  fi
  for ((i = 0; i < ${#data_dirs_array[@]}; i++)); do
    if [ -d "${data_dirs_array[$i]}/fonts" ]; then
      echo "  <dir>${data_dirs_array[$i]}/fonts</dir>"
    fi
  done
  echo '  <include ignore_missing="yes">conf.d</include>'
  # We need to include this default cachedir first so that caching
  # works: without it, fontconfig will try to write to the real user home
  # cachedir and be blocked by AppArmor.
  echo '  <cachedir prefix="xdg">fontconfig</cachedir>'
  if [ -d "$REALHOME/.cache/fontconfig" ]; then
    echo "  <cachedir>$REALHOME/.cache/fontconfig</cachedir>"
  fi
  echo "</fontconfig>"
}

if [ "$needs_update" = true ]; then
  rm -rf "$XDG_DATA_HOME"/{fontconfig,fonts,fonts-*,themes,.themes}

  # This fontconfig fragment is installed in a location that is
  # included by the system fontconfig configuration: namely the
  # etc/fonts/conf.d/50-user.conf file.
  mkdir -p "$XDG_CONFIG_HOME/fontconfig"
  make_user_fontconfig > "$XDG_CONFIG_HOME/fontconfig/fonts.conf"

  # Build mime.cache
  # needed for gtk and qt icon
  rm -rf "$XDG_DATA_HOME/mime"
  if [ ! -f "$SNAP/usr/share/mime/mime.cache" ]; then
    if command -v update-mime-database >/dev/null; then
      cp --preserve=timestamps -dR "$SNAP/usr/share/mime" "$XDG_DATA_HOME"
      update-mime-database "$XDG_DATA_HOME/mime"
    fi
  fi
fi

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE="$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache"
export GDK_PIXBUF_MODULEDIR="$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders"
if [ $needs_update = true ]; then
  rm -f "$GDK_PIXBUF_MODULE_FILE"
  if [ -f "$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders" ]; then
    "$SNAP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders" > "$GDK_PIXBUF_MODULE_FILE"
  fi

  # Icon themes cache
  rm -rf "$XDG_DATA_HOME/icons"
  mkdir -p "$XDG_DATA_HOME/icons"
  for ((i = 0; i < ${#data_dirs_array[@]}; i++)); do
    for theme in "${data_dirs_array[$i]}/icons/"*; do
      if [ -f "$theme/index.theme" -a ! -f "$theme/icon-theme.cache" ]; then
        theme_dir="$XDG_DATA_HOME/icons/$(basename "$theme")"
        if [ ! -d "$theme_dir" ]; then
          mkdir -p "$theme_dir"
          ln -s "$theme"/* "$theme_dir"
          if [ -f "$SNAP/usr/sbin/update-icon-caches" ]; then
            "$SNAP/usr/sbin/update-icon-caches" "$theme_dir"
          elif [ -f "$SNAP/usr/sbin/update-icon-cache.gtk2" ]; then
            "$SNAP/usr/sbin/update-icon-cache.gtk2" "$theme_dir"
          fi
        fi
      fi
    done
  done
fi

# GTK theme and behavior modifier
# Those can impact the theme engine used by Qt as well
gtk_configs=(gtk-3.0/settings.ini gtk-3.0/bookmarks gtk-2.0/gtkfilechooser.ini)
for f in ${gtk_configs[@]}; do
  dest="$XDG_CONFIG_HOME/$f"
  if [ ! -L "$dest" ]; then
    mkdir -p "$(dirname $dest)"
    ln -s "$REALHOME/.config/$f" "$dest"
  fi
done

if [ "$wayland_available" = true ]; then
  export GDK_BACKEND="wayland"
  export CLUTTER_BACKEND="wayland"
  # Does not hurt to specify this as well, just in case
  export QT_QPA_PLATFORM="wayland-egl"
fi

# ibus and fcitx integration
GTK_IM_MODULE_DIR="$XDG_CACHE_HOME/immodules"
export GTK_IM_MODULE_FILE="$GTK_IM_MODULE_DIR/immodules.cache"
if [ "$needs_update" = true ]; then
  rm -rf "$GTK_IM_MODULE_DIR"
  mkdir -p "$GTK_IM_MODULE_DIR"
  ln -sf "$SNAP/usr/lib/$ARCH/gtk-3.0/3.0.0/immodules/"*.so "$GTK_IM_MODULE_DIR"
  if [ "$SNAP_ARCH" = "amd64" ]; then
    ln -sf "$SNAP/usr/lib/i386-linux-gnu/gtk-3.0/3.0.0/immodules/"*.so "$GTK_IM_MODULE_DIR"
  fi
  "$SNAP/usr/lib/$ARCH/libgtk-3-0/gtk-query-immodules-3.0" > "$GTK_IM_MODULE_FILE"
fi

# Don't Stop wine from updating $WINEPREFIX automatically
if [ -f "${WINEPREFIX}/.update-timestamp" ]; then
  chkstmp="$(grep -c disable "${WINEPREFIX}/.update-timestamp")"
  if [ "$chkstmp" -eq 1 ]; then
    # echo "disable" > "${WINEPREFIX}/.update-timestamp"
    rm "${WINEPREFIX}/.update-timestamp"
  fi
fi

# Initialise wine
if [ ! -f "${WINEPREFIX}/drive_c/windows/win.ini" ] && [ ! -f "${WINEPREFIX}/drive_c/windows/system.ini" ]; then
  # Splash
  yad --timeout=90 --timeout-indicator=bottom --text="${NOTICE}" --image="${SNAP_ICON}" --no-escape --width=460 --no-buttons --splash &
  # Create the WINE environment
  "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows environment" --width=400 --center --no-buttons --auto-close --auto-kill --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]; then
    mkdir -p "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi
else
  # Notification
  notify-send --icon "${SNAP_ICON}" --expire-time=15000 "${SNAP_TITLE}" "${NOTICE}"
fi

[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > "$SNAP_USER_DATA/.last_revision"

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it otherwise install it then lauch it.
case "${WINE_EXE}" in
  "winetricks"|"setup-dxvk")
    "${SNAP}/bin/${WINE_EXE}" "${WINE_EXE_ARGS[@]}"
    ;;
  "wineboot"|"winecfg"|"winedbg")
    "${WINEVERPATH}/bin/${WINE_EXE}" "${WINE_EXE_ARGS[@]}"
    ;;
  *)
    if [ -f "$SNAP/version" ] && vercomp "$(cat "$SNAP_USER_COMMON/version" 2>/dev/null)" "$(cat "$SNAP/version" 2>/dev/null)" || [ ! -e "$WINE_EXE" ]; then
      install_app
    else
      launch_app
    fi
    ;;
esac
